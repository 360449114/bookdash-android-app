buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'com.android.databinding'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}


def appConfig = new Properties()

appConfig.load(new FileInputStream(rootProject.file("appconfig.properties")))

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "org.bookdash.android"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 11
        versionName "1.0.11"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "PARSE_APPLICATION_ID", appConfig.PARSE_APPLICATION_ID
        buildConfigField "String", "PARSE_CLIENT_KEY", appConfig.PARSE_CLIENT_KEY

    }
    File signFile = rootProject.file('release-keystore.properties')
    if (signFile.exists()) {
        signingConfigs {
            release {
                def props = new Properties()

                props.load(new FileInputStream(signFile))

                storeFile rootProject.file(props.keyStore)
                storePassword props.keyStorePassword
                keyAlias props.keyAlias
                keyPassword props.keyAliasPassword
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'

        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
        exclude 'LICENSE.txt'
    }

    productFlavors {
        mock {
            applicationIdSuffix = ".mock"
        }
        prod {

        }
    }
    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if(variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('mock')) {
            variant.setIgnore(true);
        }
    }
    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    buildTypes {
        release {
            shrinkResources false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),'proguard-rules.pro'
            signingConfig signingConfigs.release
            ext.enableCrashlytics = true
        }
        debug {
            ext.enableCrashlytics = false
            // Run code coverage reports by default on debug builds.
            testCoverageEnabled = true
        }
    }
}

dependencies {

    testCompile "junit:junit:$rootProject.ext.junitVersion"
    testCompile "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
    testCompile "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"
    testCompile ("org.powermock:powermock-module-junit4:$rootProject.ext.powerMockito")
    testCompile ("org.powermock:powermock-api-mockito:$rootProject.ext.powerMockito")

    // Android Testing Support Library's runner and rules
    androidTestCompile ('com.android.support.test.espresso:espresso-web:2.2.1'){
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
    }
    androidTestCompile ("com.android.support.test:runner:$rootProject.ext.runnerVersion"){
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
    }
    androidTestCompile ("com.android.support.test:rules:$rootProject.ext.runnerVersion"){
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
    }

    // Espresso UI Testing
    androidTestCompile ("com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion"){
        exclude module: 'recyclerview-v7'
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
        exclude group: "javax.inject"

    }
    androidTestCompile ("com.android.support.test.espresso:espresso-contrib:$rootProject.ext.espressoVersion") {
        exclude module: 'recyclerview-v7'
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
    }
    androidTestCompile ("com.android.support.test.espresso:espresso-intents:$rootProject.ext.espressoVersion"){
        exclude module: 'recyclerview-v7'
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
    }
    compile 'com.google.android.gms:play-services-analytics:8.3.0'

    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':fabbutton')

    compile "com.android.support:appcompat-v7:$rootProject.ext.supportLibraryVersion"
    compile "com.android.support:cardview-v7:$rootProject.ext.supportLibraryVersion"
    compile "com.android.support:palette-v7:$rootProject.ext.supportLibraryVersion"
    compile "com.android.support:design:$rootProject.ext.supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$rootProject.ext.supportLibraryVersion"
    compile "com.android.support:percent:$rootProject.ext.supportLibraryVersion"
    compile 'com.github.bumptech.glide:glide:3.6.1'
    compile 'com.google.code.gson:gson:2.4'
    compile 'com.github.castorflex.smoothprogressbar:library-circular:1.2.0'

    compile 'com.parse.bolts:bolts-android:1.3.0'
    compile 'com.parse:parse-android:1.11.0'
    compile('com.crashlytics.sdk.android:crashlytics:2.5.3@aar') {
        transitive = true;
    }
    compile 'za.co.riggaroo:materialhelptutorial:1.0.3'
    compile 'com.google.android.gms:play-services-appindexing:8.3.0'
}
